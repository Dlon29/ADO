using IBM.WMQ;
using Messaging.IBMMQ.Shared.Interface;
using Messaging.IBMMQ.Shared.Models;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Text;
using System.Timers;

namespace Messaging.IBMMQ
{
    public class IBMMQPublisher : IBMMQClient, IPublisher
    {
        private readonly ILogger<IBMMQPublisher> _logger;
        private System.Timers.Timer _idleTimeout;

        #region Constructor
        public IBMMQPublisher(IOptions<IBMMQConnectionSettings> ibmMQSettings, ILogger<IBMMQPublisher> logger)
            : base(ibmMQSettings, logger)
        {
            _logger = logger;

            _idleTimeout = new System.Timers.Timer
            {
                AutoReset = true
            };

            _idleTimeout.Elapsed += (object sender, ElapsedEventArgs e) =>
            {
                this.DisableIdleTimeout();
                this.Disconnect();
            };
        }
        #endregion

        public string HostName => _ibmMQSettings.HostName;

        public string QueueName => _queueName;

        private void DisableIdleTimeout()
        {
            try
            {
                _idleTimeout.Enabled = false;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error disabling idle timeout in IBMMQPublisher");
                throw;
            }
        }

        private void EnableIdleTimeout()
        {
            try
            {
                if (_ibmMQSettings.IdleTimeout <= 0) return;

                _idleTimeout.Interval = _ibmMQSettings.IdleTimeout * 1000;
                _idleTimeout.Enabled = true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error enabling idle timeout in IBMMQPublisher");
                throw;
            }
        }

        /// <summary>
        /// Publishes a plain message string (e.g., JSON).
        /// </summary>
        public void Publish(string messageBody)
        {
            try
            {
                DisableIdleTimeout();
                Connect();

                MQMessage mqMessage = new MQMessage
                {
                    CharacterSet = 1208, // UTF-8
                    Encoding = 273
                };

                mqMessage.Write(Encoding.UTF8.GetBytes(messageBody));

                MQPutMessageOptions mqPutOptions = new MQPutMessageOptions();
                _queue.Put(mqMessage, mqPutOptions);

                _logger.LogInformation("Successfully published message to {QueueName}", _queueName);
                _logger.LogDebug("MessageBody: {MessageBody}", messageBody);

                EnableIdleTimeout();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error publishing string message to IBM MQ");
                throw;
            }
        }

        /// <summary>
        /// Publishes a Payload object (Body is assumed to be a raw string, not JSON).
        /// </summary>
        public Task Publish(Payload msg, CancellationToken ct)
        {
            try
            {
                DisableIdleTimeout();
                Connect();

                MQMessage mqMessage = new MQMessage
                {
                    CharacterSet = 1208, // UTF-8
                    Encoding = 273
                };

                mqMessage.Write(Encoding.UTF8.GetBytes(msg.Body));

                if (!string.IsNullOrEmpty(msg.CorrelationId))
                {
                    mqMessage.CorrelationId = Encoding.UTF8.GetBytes(msg.CorrelationId);
                }

                MQPutMessageOptions mqPutOptions = new MQPutMessageOptions();
                _queue.Put(mqMessage, mqPutOptions);

                _logger.LogInformation("Successfully published payload to {QueueName}", _queueName);
                _logger.LogDebug("MessageBody: {MessageBody}", msg.Body);

                EnableIdleTimeout();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error publishing payload to IBM MQ");
                throw;
            }

            return Task.CompletedTask;
        }
    }
}
