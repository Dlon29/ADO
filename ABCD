// Create a dictionary to store the last SwiftMsgId for each (EuroclearAcct, BgnRef, Category) pair
Dictionary<Tuple<string, string, string>, string> euroclearAcctBgnRefCategoryToSwiftMsgId = new Dictionary<Tuple<string, string, string>, string>();

// Inside the loop processing each row
foreach (GridViewRow row in gvEuroclearDashboard.Rows)
{
    try
    {
        // Extract relevant fields from the row
        string euroclearAcct = Server.HtmlDecode(Convert.ToString((row.Cells[(int)grdEuroclear.EuroclearAccount]).Text)).Trim();
        string bgnRef = (row.FindControl(ControlIDEuroclear.hdnECBGNREF.ToString()) as HiddenField).Value;
        string category = ((HiddenField)(row.FindControl(ControlIDEuroclear.hdnECCategory.ToString()))).Value.Trim().ToUpper();

        // Generate or reuse SwiftMsgId based on EuroclearAcct, BgnRef, and Category
        string currentSwiftMsgID;

        // Use a tuple of (EuroclearAcct, BgnRef, Category) as the key
        var key = Tuple.Create(euroclearAcct, bgnRef, category);

        // Check the conditions: if the combination of EuroclearAcct, BgnRef, and Category changes, generate a new SwiftMsgId
        if (euroclearAcctBgnRefCategoryToSwiftMsgId.ContainsKey(key))
        {
            // Reuse the stored SwiftMsgId for the same EuroclearAcct, BgnRef, and Category combination
            currentSwiftMsgID = euroclearAcctBgnRefCategoryToSwiftMsgId[key];
        }
        else
        {
            // If no existing SwiftMsgId, generate a new one
            currentSwiftMsgID = swiftMsg.GenerateMT530SwiftMessage(false).ToString();
            // Store the new SwiftMsgId for this (EuroclearAcct, BgnRef, Category) combination
            euroclearAcctBgnRefCategoryToSwiftMsgId[key] = currentSwiftMsgID;
        }

        // Check if the Swift message ID should be generated based on your existing condition
        if (category != enumLoanCategory.NEW.ToString() || lastEuroclearAcct != euroclearAcct || lastBgnRef != bgnRef)
        {
            // Generate the new SwiftMsgId if the condition matches
            currentSwiftMsgID = swiftMsg.GenerateMT530SwiftMessage(false).ToString();
            lastEuroclearAcct = euroclearAcct;
            lastBgnRef = bgnRef;
            lastCategory = category; // Keep track of the last category as well
        }
        
        // Add current SwiftMsgID to the XML
        RFDFswiftMsgId.Append(currentSwiftMsgID);
        
        // Other logic for handling the Swift message
        // (populating XML, logging, etc.)

        // Example: Log the generated Swift message ID
        _logger.InfoFormat("Swift message generated with SWIFTMessageId {0}.", currentSwiftMsgID);

        // Add XML element (or do further processing)
        xml.Add(new XElement(FieldName,
            new XAttribute(BGNREF, bgnRef),
            new XAttribute(EuroclearAccount, euroclearAcct),
            new XAttribute(SwiftMsgID, currentSwiftMsgID),
            new XAttribute(TOE, Toe)
        ));

    }
    catch (Exception ex)
    {
        _ErrorString = new StringBuilder();
        _ErrorString.Append(ex.Message);
        _show_info_row = _ErrorInfoNone;






// Dictionary to store the SwiftMsgID using the concatenated key
Dictionary<string, string> swiftMsgDict = new Dictionary<string, string>();

foreach (GridViewRow row in gvEuroclearDashboard.Rows)
{
    try
    {
        // Retrieve values from the row (same as before)
        string BGNREF = ((HiddenField)row.FindControl(ControlIDEuroclear.hdnECBGNREF.ToString())).Value;
        string ECAcct = ((HiddenField)row.FindControl(ControlIDEuroclear.hdnECEuroclearAccount.ToString())).Value;
        string category = ((HiddenField)row.FindControl(ControlIDEuroclear.hdnECCategory.ToString())).Value.Trim().ToUpper();

        // Construct the string key (BGNREF.ECAcct.Category)
        string BGNREFECAcctCategoryKey = string.Format("{0}.{1}.{2}", BGNREF, ECAcct, category);

        // Check if the key already exists in the dictionary
        if (!swiftMsgDict.ContainsKey(BGNREFECAcctCategoryKey))
        {
            // If it doesn't exist, initialize with a placeholder value (e.g., "0")
            swiftMsgDict[BGNREFECAcctCategoryKey] = "0";  // Indicates that SwiftMsgID is not generated yet
        }

        // Check if the key exists and whether SwiftMsgID needs to be generated
        string currentSwiftMsgID = string.Empty;
        if (swiftMsgDict[BGNREFECAcctCategoryKey] == "0")
        {
            // Generate a new SwiftMsgID since it's not generated yet
            currentSwiftMsgID = swiftMsg.GenerateMT530SwiftMessage(false).ToString();
            swiftMsgDict[BGNREFECAcctCategoryKey] = currentSwiftMsgID;  // Store the generated SwiftMsgID
        }
        else
        {
            // If the SwiftMsgID is already generated, reuse it
            currentSwiftMsgID = swiftMsgDict[BGNREFECAcctCategoryKey];
        }

        // Add the generated SwiftMsgID to your XML or perform other processing
        RFDFswiftMsgId.Append(currentSwiftMsgID);
        _logger.InfoFormat("Swift message generated with SWIFTMessageId {0}.", RFDFswiftMsgId.ToString());

        // Add the data to your XML (as done in the original solution)
        xml.Add(new XElement(FieldName,
            new XAttribute(BGNREF, BGNREF),
            new XAttribute(AcctNbr, acctNbr),
            new XAttribute(AcctGrpID, acctGrpID),
            new XAttribute(ClientFICCID, hdnClientFICCID),
            new XAttribute(TripartyRepoBankName, hdnTripartyRepoBankName),
            new XAttribute(IsTriparty, hdnTripartyRepo),
            new XAttribute(IsFICC, hdnIsFICCMatched),
            new XAttribute(SecCode, secCode),
            new XAttribute(SettlementDate, hdnSettlementDate),
            new XAttribute(TradeType, tradeTypeVal),
            new XAttribute(CitiAccount, string.Empty),              // CitiAccount not needed hence passing empty
            new XAttribute(SwiftMsgID, RFDFswiftMsgId),
            new XAttribute(Fed_Status, fedStatus),
            new XAttribute(Notes, notes),
            new XAttribute(EuroclearAccount, euroclearAcct),
            new XAttribute(EuroclearSwitchStatus, (int)enumSwiftAction.MT530),
            new XAttribute(TOE, Toe)
        ));
    }
    catch (Exception ex)
    {
        _ErrorString = new StringBuilder();
        _ErrorString.Append(ex.Message);
        _show_info_row = _ErrorInfoNone;
        _show_error_row = _ErrorInfoBlank;
        _logger.Error(ex);
        return;
    }
}

// After processing all rows
_logger.Info("Swift generation end");

// Update SwiftMsg ID in SettlementStatus Swift table with swift message ID
try
{
    // Update SwiftMsg ID in SettlementStatus Swift table with swift message ID
    UpdateECSettlement
