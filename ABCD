CREATE PROC [dbo].[p_GenerateAutoReleaseSwitchMessage]
(
	@pAppID INT,
	@pBatchRunDate DATETIME,
	@pSWIFTMsgSaveStatusID INT,
	@pEventCode VARCHAR(100)
)
AS 
BEGIN 
	SET NOCOUNT ON;

	DECLARE @SwiftMsgId INT 
	DECLARE @SwiftMsgIDs AS VARCHAR(500)
	DECLARE @MT530 VARCHAR(5) 	
	DECLARE @SwiftMsgType AS VARCHAR(5)
	
	DECLARE @Preparation_date DATETIME 
	DECLARE @SWIFT_XML XML 	 		
	DECLARE @AccountSwitchNotRequired VARCHAR(500)
	DECLARE @REC_BICCODE INT
	DECLARE @MT530_BIC INT				
	DECLARE @Settlement_XML VARCHAR(MAX)
	DECLARE @Max AS INT
	DECLARE @CurrentID AS INT	 	
	DECLARE @SWITCH_SEME_D_SUFFIX AS VARCHAR(5)
	DECLARE @MSG_FUNCTION_RELEASE_ON_HOLD AS VARCHAR(5)
	DECLARE @MSG_FUNCTION_SWITCH AS VARCHAR(5)		
	DECLARE @EuroclearDepots AS VARCHAR (MAX) = ''	
	DECLARE @CategoryPULL VARCHAR(4) = 'PULL'
	DECLARE @TOE_OPEN_NEW_LOAN_OR_BORROW VARCHAR(4) = 'OSL'
	DECLARE @TOE_CONFIRM_SETTLEMENT_DATE VARCHAR(4) = 'CSD'
	DECLARE @TOE_RETURN_LOAN_OR_BORROW VARCHAR(4) = 'RSL'
	DECLARE @EUROCLEAR_IDENTIFIER AS INT = 2
	DECLARE @EuroclearMT530SwitchStatus AS INT = 2  --1 - Switch Status, 2 - MT530 Switch Status, 3 - Cancel SwitchStatus
													
	SELECT @EuroclearDepots = dbo.f_GetDomainLookupValue('EUROCLEAR_DEPOTS', 'EUROCLEAR_DEPOTS_LIST')     
	SELECT ClearAgentNbr = Parameter     
	INTO #TMP_EURO_CLEARING_AGENT    
	FROM dbo.f_ParseParameters( @EuroclearDepots )  

	SET @SwiftMsgId=-1      
	SET @MT530='MT530' 	
	
	--BEGIN SWIFT CONFIGURATIONS
	SET @Preparation_date=GETDATE()
	
	SELECT @AccountSwitchNotRequired	 = dbo.f_GetDomainLookupValue('SWIFT_TAG_CONSTANTS_EUROCLEAR', 'EUROCLEAR_ACCT_SWITCH_NOT_REQUIRED')									  		
	SELECT @MSG_FUNCTION_RELEASE_ON_HOLD = dbo.f_GetDomainLookupValue('SWIFT_TAG_CONSTANTS_EUROCLEAR', 'MSG_FUNCTION_RELEASE_ON_HOLD')
	SELECT @SWITCH_SEME_D_SUFFIX		 = dbo.f_GetDomainLookupValue('SWIFT_TAG_CONSTANTS_EUROCLEAR', 'SWITCH_SEME_D_SUFFIX')
	SELECT @MSG_FUNCTION_SWITCH			 = dbo.f_GetDomainLookupValue('SWIFT_TAG_CONSTANTS_EUROCLEAR', 'MSG_FUNCTION_SWITCH')	
	
	/*-------------------------------Insert Table Schema into temp table #TMP_OPERATION_SHEET -----------------------------------------------------------------------------*/
	IF OBJECT_ID('tempdb..#TMP_SWIFTBICCodes') IS NULL 
	BEGIN
		SELECT * 
		INTO #TMP_SWIFTBICCodes
		FROM LAVA.dbo.f_CreateSWIFTBICCodeSchema()

		EXEC LAVA.DBO.p_Swift_GetBICCodes NULL, NULL
	END

	SELECT
		 @MT530_BIC = CASE WHEN ( Identifier = 'RECEIVER' ) AND ( SwiftMsgTypeCode = @MT530 ) AND ( EventCode = @pEventCode ) THEN InstitutionId 
						   ELSE @MT530_BIC
				      END		 
	FROM 
		#TMP_SWIFTBICCodes

	SELECT @REC_BICCODE = @MT530_BIC	

	--END SWIFT CONFIGURATIONS

	CREATE TABLE #TMP_SWIFT_OPS 
	( 
		ID					INT IDENTITY(1,1), 
		BGNREF				VARCHAR(12),
		SettlementDate		DATETIME,
		TradeDate			DATETIME,
		DeliverReceive		VARCHAR(20),
		SecurityCode		VARCHAR(50),
		SecurityDesc		VARCHAR(100),
		Amount				NUMERIC(13,0),
		Quantity			NUMERIC(13,0),		
		EuroclearAccount	VARCHAR(5),
		TransactionId		VARCHAR(11),
		ClientFICCID		VARCHAR(10),
		IsFICCMatched		CHAR(1),
		AcctNbr				VARCHAR(12),
		AcctGrpID			INT,
		TripartyRepoBankName VARCHAR(100),
		TripartyRepo		CHAR(1),
		TradeType			VARCHAR(100),
		FICCTrade			CHAR(1),
		GenerateSWIFT		CHAR(1),
		FedStatus			VARCHAR(20),
		Notes				VARCHAR(MAX),
		SwiftReferenceNbr	VARCHAR(16),
		Category			VARCHAR(10)
	)

	SELECT 
		TagName, TagValue, TagCode, CompPosition, InstanceNumber, SwiftMsgTypeSeqID, SeqInstanceNumber,SwiftMsgType
	INTO 
		#TMP_MT_TAGS
	FROM   
		dbo.MTTagComponent 
	WHERE  
		SwiftMsgType = @MT530 AND
		EventCode = @pEventCode		

     --Get all the transactions from SP or table to generate swift message
	IF OBJECT_ID('tempdb..#TMP_OPERATION_SHEET') IS NULL 
	BEGIN
		SELECT * 
		INTO #TMP_OPERATION_SHEET
		FROM LAVA.dbo.f_CreateOperationSheetSchema()
	END

	EXEC LAVA.dbo.p_GetOperationSheet @BatchRunDate = @pBatchRunDate, @DepoInd = @EuroclearDepots, @Identifier = @EUROCLEAR_IDENTIFIER	  			

	--MT530
	INSERT INTO #TMP_SWIFT_OPS
	(
		BGNREF, SettlementDate, TradeDate, DeliverReceive, SecurityCode, SecurityDesc, Amount, Quantity, EuroclearAccount, TransactionId, ClientFICCID, 
		IsFICCMatched, AcctNbr, AcctGrpID, TripartyRepoBankName, TripartyRepo, TradeType, FICCTrade, GenerateSWIFT, FedStatus, Notes, SwiftReferenceNbr, Category	
	)
	SELECT
		 BGNREF,
		 SettlementDate,
		 TradeDate,
		 DeliverReceive,
		 SecCode,
		 SecurityDesc,
		 Amount = SettlementAmount,
		 Quantity = FaceAmount,		 
		 EuroclearAccount,
		 '',
		 '',
		 IsFICCMatched,
		 AcctNbr,
		 AcctGrpID,
		 TripartyRepoBankName,
		 TripartyRepo,
		 TradeType,
		 'N',
		 CASE WHEN EuroclearAccount IN (SELECT Items FROM dbo.f_Split(@AccountSwitchNotRequired,','))
			  THEN 'N' 
			  WHEN ISNULL(EuroclearAccount,'') = ''
			  THEN 'N'
			  ELSE 'Y' 
		 END,
		 FedStatus,
		 '',
		 SwiftReferenceNumber,
		 Category
	FROM 
		#TMP_OPERATION_SHEET
	WHERE
		( LTRIM(RTRIM((UPPER(MT530SwitchStatus)))) = 'AUTO' ) AND
		( LTRIM(RTRIM(UPPER(MT530SwiftStatus))) = 'NOT SENT' ) AND		
		( TOE IN (@TOE_OPEN_NEW_LOAN_OR_BORROW, @TOE_CONFIRM_SETTLEMENT_DATE, @TOE_RETURN_LOAN_OR_BORROW) ) AND
		( Category = @CategoryPULL )		

	SELECT @CurrentID = MIN(ID) 
	FROM #TMP_SWIFT_OPS
	
	SELECT @Max = MAX(ID) 
	FROM #TMP_SWIFT_OPS
	

	SELECT MTMSGTYPE = @SwiftMsgType , 
		   IS_SWAP_ACCTS = CONVERT(BIT,0) 
	INTO #TMP_SWIFT_MSG
	WHERE ( 1 = 0 )

    WHILE ( @CurrentID  <= @Max ) 
    BEGIN 
		SET ROWCOUNT 0

		BEGIN TRY
			
			--IF Euroclear Account Is Set up for Account and is Segregated
			IF EXISTS (SELECT 1 FROM #TMP_SWIFT_OPS 
					   WHERE ( GenerateSWIFT = 'Y' ) AND ( ID = @CurrentID ) )		
			BEGIN

				SET @SwiftMsgIDs = ''
				TRUNCATE TABLE #TMP_SWIFT_MSG
		
				SELECT  
					@SwiftMsgType= @MT530
				FROM
					#TMP_SWIFT_OPS
				WHERE 
					( ID = @CurrentID )
				

				INSERT INTO #TMP_SWIFT_MSG  (  MTMSGTYPE, IS_SWAP_ACCTS  )
				SELECT MTMSGTYPE = @SwiftMsgType, IS_SWAP_ACCTS = 0 				

				--Added for unique swift reference for two sided switches                

				WHILE EXISTS ( SELECT * FROM #TMP_SWIFT_MSG ) 
				BEGIN
					
					SELECT TOP 1 @SwiftMsgType = MTMSGTYPE
					FROM #TMP_SWIFT_MSG 

					DELETE FROM #TMP_SWIFT_MSG 
					WHERE ( MTMSGTYPE = @SwiftMsgType )


					--XML Generation
					SET 
						@SWIFT_XML=(SELECT 
											TagName,														  
											(
											CASE T.tagvalue 
													WHEN 'REFERENCE_NUMBER_ACCTSWITCH' THEN L.SwiftReferenceNbr + @MSG_FUNCTION_RELEASE_ON_HOLD																							
													WHEN 'PREPARATION_DATE'			   THEN (SELECT CONVERT(VARCHAR(10), @Preparation_date,112))	
													WHEN 'CUST_SEGREGATED_ACCOUNT'	   THEN L.EuroclearAccount																							
													WHEN 'PREVIOUS_MESSAGE_REFERENCE'  THEN L.SwiftReferenceNbr + @MSG_FUNCTION_SWITCH + @SWITCH_SEME_D_SUFFIX											
													ELSE T.tagvalue                   
											END		
									) TagValue,          
									TagCode,         
									CompPosition, 
									InstanceNumber, 
									SwiftMsgTypeSeqId,
									SeqInstanceNumber 
								FROM   
									#TMP_SWIFT_OPS AS L, 
									#TMP_MT_TAGS AS T
								WHERE  
									( ID = @CurrentID ) AND 
									( T.SwiftMsgType = @SwiftMsgType )

								FOR XML RAW ('TblTagComp'), 
								ROOT('DocumentElement'), 
								ELEMENTS 
								) 					
					

					EXEC p_InsertUpdateSwiftMsgData 
							@pMsgType=@SwiftMsgType, 
							@pReferenceId='2', 
							@pExpectedSendDate=@Preparation_date, 
							@pUserId='SYSTEM', 
							@pXMLSwiftMessageData=@SWIFT_XML, 
							@pDestinationId=null, 
							@pSwiftMsgRecipientInstitutionId=@REC_BICCODE, 
							@pAppId=@pAppID, 
							@pMessageStatusId=@pSWIFTMsgSaveStatusID, 
							@pSwiftMsgId=@SwiftMsgId output 			 
					
					SET @SwiftMsgIDs = CASE WHEN ( @SwiftMsgIDs = '' ) THEN @SwiftMsgIDs 
											ELSE @SwiftMsgIDs + ',' 
									   END + CONVERT(VARCHAR(25),@SwiftMsgId )
				END

				SET	@Settlement_XML=
								(
									SELECT
										BGNREF,
										AcctNbr,
										AcctGrpID,
										ClientFICCID,
										TripartyRepoBankName,
										SecurityCode AS SecCode,
										TripartyRepo AS IsTriparty,
										IsFICCMatched AS IsFICC,
										CONVERT(VARCHAR(10),SettlementDate,101) AS SettlementDate,
										TradeType,
										'' AS CitiAccount,										
										@SwiftMsgIDs AS SwiftMsgID,
										FedStatus = CASE TMP_SWIFT.FedStatus WHEN 'Settled' THEN 1 
																			 WHEN 'Failed' THEN 2 
																			 ELSE 0 END,
										TMP_SWIFT.Notes,										
										TransactionID,
										TMP_SWIFT.EuroclearAccount AS EuroclearAccount,
										@EuroclearMT530SwitchStatus AS EuroclearSwitchStatus
									FROM
										#TMP_SWIFT_OPS AS TMP_SWIFT
									WHERE
										TMP_SWIFT.ID = @CurrentID                                   
									FOR XML RAW('FieldName'),
									ROOT('Txnlist')
								)

				EXEC p_SaveData_OperationsDashboard 
						@BatchDate=@pBatchRunDate,
						@ModifiedBy='SYSTEM',
						@Identifier='SWIFT',
						@Txnlist=@Settlement_XML,
						@DashboardIdentifier = @EUROCLEAR_IDENTIFIER

				SET @Settlement_XML = '' 
			END
		END TRY
		BEGIN CATCH	
			EXEC p_GetOutputMessage 0,''  
		END CATCH
		
		SET @CurrentID = @CurrentID + 1
	END 

	DROP TABLE #TMP_MT_TAGS 	
	DROP TABLE #TMP_SWIFT_OPS

	SET NOCOUNT OFF; 
END 
