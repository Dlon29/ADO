// Create a dictionary to store the last SwiftMsgId for each (EuroclearAcct, BgnRef, Category) pair
Dictionary<Tuple<string, string, string>, string> euroclearAcctBgnRefCategoryToSwiftMsgId = new Dictionary<Tuple<string, string, string>, string>();

// Inside the loop processing each row
foreach (GridViewRow row in gvEuroclearDashboard.Rows)
{
    try
    {
        // Extract relevant fields from the row
        string euroclearAcct = Server.HtmlDecode(Convert.ToString((row.Cells[(int)grdEuroclear.EuroclearAccount]).Text)).Trim();
        string bgnRef = (row.FindControl(ControlIDEuroclear.hdnECBGNREF.ToString()) as HiddenField).Value;
        string category = ((HiddenField)(row.FindControl(ControlIDEuroclear.hdnECCategory.ToString()))).Value.Trim().ToUpper();

        // Generate or reuse SwiftMsgId based on EuroclearAcct, BgnRef, and Category
        string currentSwiftMsgID;

        // Use a tuple of (EuroclearAcct, BgnRef, Category) as the key
        var key = Tuple.Create(euroclearAcct, bgnRef, category);

        // Check the conditions: if the combination of EuroclearAcct, BgnRef, and Category changes, generate a new SwiftMsgId
        if (euroclearAcctBgnRefCategoryToSwiftMsgId.ContainsKey(key))
        {
            // Reuse the stored SwiftMsgId for the same EuroclearAcct, BgnRef, and Category combination
            currentSwiftMsgID = euroclearAcctBgnRefCategoryToSwiftMsgId[key];
        }
        else
        {
            // If no existing SwiftMsgId, generate a new one
            currentSwiftMsgID = swiftMsg.GenerateMT530SwiftMessage(false).ToString();
            // Store the new SwiftMsgId for this (EuroclearAcct, BgnRef, Category) combination
            euroclearAcctBgnRefCategoryToSwiftMsgId[key] = currentSwiftMsgID;
        }

        // Check if the Swift message ID should be generated based on your existing condition
        if (category != enumLoanCategory.NEW.ToString() || lastEuroclearAcct != euroclearAcct || lastBgnRef != bgnRef)
        {
            // Generate the new SwiftMsgId if the condition matches
            currentSwiftMsgID = swiftMsg.GenerateMT530SwiftMessage(false).ToString();
            lastEuroclearAcct = euroclearAcct;
            lastBgnRef = bgnRef;
            lastCategory = category; // Keep track of the last category as well
        }
        
        // Add current SwiftMsgID to the XML
        RFDFswiftMsgId.Append(currentSwiftMsgID);
        
        // Other logic for handling the Swift message
        // (populating XML, logging, etc.)

        // Example: Log the generated Swift message ID
        _logger.InfoFormat("Swift message generated with SWIFTMessageId {0}.", currentSwiftMsgID);

        // Add XML element (or do further processing)
        xml.Add(new XElement(FieldName,
            new XAttribute(BGNREF, bgnRef),
            new XAttribute(EuroclearAccount, euroclearAcct),
            new XAttribute(SwiftMsgID, currentSwiftMsgID),
            new XAttribute(TOE, Toe)
        ));

    }
    catch (Exception ex)
    {
        _ErrorString = new StringBuilder();
        _ErrorString.Append(ex.Message);
        _show_info_row = _ErrorInfoNone;
