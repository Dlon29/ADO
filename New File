using Microsoft.Extensions.Logging;
using System.Timers;
using System.Data.SqlClient;
using Microsoft.Extensions.Configuration;
using Dapper;

namespace Messaging.Processing
{
    public class MessageProcessor : IDisposable
    {
        private readonly ILogger<MessageProcessor> _logger;
        private readonly IConfiguration _configuration;
        private readonly System.Timers.Timer _inactivityTimer;
        private readonly object _lock = new object();

        private const int InactivityIntervalInSeconds = 20;
        private bool _disposed = false;

        public MessageProcessor(ILogger<MessageProcessor> logger, IConfiguration configuration)
        {
            _logger = logger;
            _configuration = configuration;

            _inactivityTimer = new System.Timers.Timer(InactivityIntervalInSeconds * 1000);
            _inactivityTimer.Elapsed += OnTimerElapsed;
            _inactivityTimer.AutoReset = false; // Only fire once unless reset
        }

        public void HandleMessage(string message)
        {
            try
            {
                SaveMessageToTempTable(message);

                lock (_lock)
                {
                    _inactivityTimer.Stop();  // Reset timer
                    _inactivityTimer.Start(); // Start again
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to handle incoming message.");
            }
        }

        private void SaveMessageToTempTable(string message)
        {
            string connectionString = _configuration.GetConnectionString("Default");

            using var connection = new SqlConnection(connectionString);
            connection.Execute("INSERT INTO TempMessages (MessageContent, ReceivedAt) VALUES (@Message, GETDATE())",
                new { Message = message });

            _logger.LogInformation("Message stored to TempMessages table.");
        }

        private void OnTimerElapsed(object sender, ElapsedEventArgs e)
        {
            try
            {
                _logger.LogInformation("20 seconds of inactivity reached. Executing stored procedure.");

                string connectionString = _configuration.GetConnectionString("Default");

                using var connection = new SqlConnection(connectionString);
                connection.Execute("EXEC dbo.ProcessMessages");

                _logger.LogInformation("Stored procedure executed successfully.");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to execute stored procedure.");
            }
        }

        public void Dispose()
        {
            if (_disposed) return;

            _inactivityTimer?.Dispose();
            _disposed = true;
        }
    }
}
