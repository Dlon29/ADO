protected void btnECMT530_click(object sender, EventArgs e)
        {
            string bgnRef = string.Empty;
            string acctNbr = string.Empty;
            string acctGrpID = string.Empty;
            string txnSeqNbr = string.Empty;
            string notes = string.Empty;
            string fedStatus = string.Empty;
            string MT530SwitchStatus = string.Empty;
            string MT530SwiftStatus = string.Empty;
            string secCode = string.Empty;
            string hdnClientFICCID = string.Empty;
            string hdnTripartyRepoBankName = string.Empty;
            string hdnSettlementDate = string.Empty;
            string hdnCUSIP = string.Empty;
            string hdnIsFICCMatched = string.Empty;
            string hdnTripartyRepo = string.Empty;
            string ficcSwiftMsgID = string.Empty;
            string tradeTypeVal = string.Empty;
            string citiAcct = string.Empty;
            string euroclearAcct = string.Empty;
            StringBuilder RFDFswiftMsgId;
            XElement xml = new XElement("Txnlist");

            string swiftRefNo = string.Empty;
            string suffixSEME_D = string.Empty;
            string suffixMsgFunction_S = string.Empty;
            string suffixMsgFunction_R = string.Empty;
            string suffixPREV_Release_Hold_G1 = string.Empty;
            string prefixPREV_Release_Hold_G1 = string.Empty;
            string prefixAcctSwitch = string.Empty;
            string Toe = string.Empty;
            string category = string.Empty;
            string currentSwiftMsgID = string.Empty;
            string lastBgnRef = string.Empty;
            string lastEuroclearAcct = string.Empty;
            string lastSwiftMsgId = string.Empty;

            List<string> validToesForMT530 = new List<string> { "OSL", "CSD", "RSL" };            
            List<string> UncheckedBgnRefsMT530 = new List<string>();
            List<string> UncheckedEuroclearAcctsMT530 = new List<string>();

            CheckBox check = new CheckBox();
            bool IsDeliver = false;
            _logger.Info("Swift generation started");

            if (ValidateSwiftStatus(enumSwiftAction.MT530) == false)     //Verifying if another user has already been processed the swift messages.
            {
                return;
            }

            prefixAcctSwitch = Convert.ToString(ViewState[Prefix_Acct_Switch]);
            suffixMsgFunction_R = Convert.ToString(ViewState[Msg_Function_Release_On_Hold_Suffix]);
            suffixMsgFunction_S = Convert.ToString(ViewState[Msg_Function_Switch_Suffix]);
            suffixSEME_D = Convert.ToString(ViewState[SwiftRef_D_Suffix]);
            suffixPREV_Release_Hold_G1 = Convert.ToString(ViewState[PREV_Release_Hold_Suffix_G1]);
            prefixPREV_Release_Hold_G1 = Convert.ToString(ViewState[PREV_Release_Hold_Prefix_G1]);
            
            foreach (GridViewRow row in gvEuroclearDashboard.Rows)
            {
                try
                {
                    check = (CheckBox)row.FindControl(ControlIDEuroclear.chkECInclude.ToString());
                    MT530SwitchStatus = ((HiddenField)(row.FindControl(ControlIDEuroclear.hdnECMT530SwitchStatus.ToString()))).Value.Trim().ToUpper();
                    MT530SwiftStatus = ((Label)(row.Cells[(int)grdEuroclear.MT530SwiftStatus].FindControl(ControlIDEuroclear.lblECMT530SwiftStatus.ToString()))).Text.Trim().ToUpper();
                    Toe = ((HiddenField)(row.FindControl(ControlIDEuroclear.hdnECToe.ToString()))).Value.Trim().ToUpper();
                    category = ((HiddenField)(row.FindControl(ControlIDEuroclear.hdnECCategory.ToString()))).Value.Trim().ToUpper();

                    if (((CheckBox)row.FindControl(ControlIDEuroclear.chkECInclude.ToString())).Checked)
                    {
                        string checkedBgnRef = ((HiddenField)row.FindControl(ControlIDEuroclear.hdnECBGNREF.ToString())).Value;
                        string checkedEuroclearAcct = ((HiddenField)row.FindControl(ControlIDEuroclear.hdnECEuroclearAccount.ToString())).Value;
                        string CheckedToe = ((HiddenField)(row.FindControl(ControlIDEuroclear.hdnECToe.ToString()))).Value.Trim().ToUpper();


                        if (!UncheckedBgnRefsMT530.Contains(checkedBgnRef) && (category == enumLoanCategory.NEW.ToString()))
                        {
                            UncheckedBgnRefsMT530.Add(checkedBgnRef);
                        }

                        if (!string.IsNullOrEmpty(checkedEuroclearAcct) && !UncheckedEuroclearAcctsMT530.Contains(checkedEuroclearAcct) && (category == enumLoanCategory.NEW.ToString()))
                        {
                            UncheckedEuroclearAcctsMT530.Add(checkedEuroclearAcct);
                        }

                    }

                    SwiftMessageGeneration swiftMsg = new SwiftMessageGeneration(enumSeggregatedAcctBank.EUROCLEAR);

                    if ((check.Checked || (UncheckedBgnRefsMT530.Contains(((HiddenField)row.FindControl(ControlIDEuroclear.hdnECBGNREF.ToString())).Value)
                                          && UncheckedEuroclearAcctsMT530.Contains(((HiddenField)row.FindControl(ControlIDEuroclear.hdnECEuroclearAccount.ToString())).Value)))
                        && (MT530SwitchStatus == enumSwitchStatus.MANUAL.ToString())
                        && (MT530SwiftStatus == SWIFT_STATUS_NOTSENT)
                        && (validToesForMT530.Contains(Toe, StringComparer.OrdinalIgnoreCase)))
                    {
                        hdnSettlementDate = GetDateTime((row.FindControl(ControlIDEuroclear.hdnECSettlementDate.ToString()) as HiddenField).Value).ToString("MM/dd/yyyy");
                        hdnClientFICCID = (row.FindControl(ControlIDEuroclear.hdnECClientFICCID.ToString()) as HiddenField).Value;
                        hdnCUSIP = (row.FindControl(ControlIDEuroclear.hdnECCUSIP.ToString()) as HiddenField).Value;
                        hdnIsFICCMatched = ((HiddenField)row.FindControl(ControlIDEuroclear.hdnECIsFICCMatched.ToString())).Value.Trim();
                        hdnTripartyRepo = ((HiddenField)row.FindControl(ControlIDEuroclear.hdnECTripartyRepo.ToString())).Value.Trim();
                        acctNbr = ((HiddenField)row.FindControl(ControlIDEuroclear.hdnECAcctNbr.ToString())).Value;
                        acctGrpID = ((HiddenField)row.FindControl(ControlIDEuroclear.hdnECAcctGrpID.ToString())).Value;
                        notes = ((TextBox)row.FindControl(ControlIDEuroclear.txtECNotes.ToString())).Text;
                        fedStatus = (row.Cells[(int)grdEuroclear.FedStatus].Text.Trim() == enumFedStatus.Settled.ToString() ? enumFedStatus.Settled.GetHashCode().ToString()
                                    : (row.Cells[(int)grdEuroclear.FedStatus].Text.Trim() == enumFedStatus.Failed.ToString() ? enumFedStatus.Failed.GetHashCode().ToString()
                                    : string.Empty));
                        secCode = ((HyperLink)row.FindControl(ControlIDEuroclear.lnkECSecCode.ToString())).Text.Trim();
                        hdnTripartyRepoBankName = (row.FindControl(ControlIDEuroclear.hdnECTripartyRepoBankName.ToString()) as HiddenField).Value;
                        IsDeliver = row.Cells[(int)grdEuroclear.DeliverReceive].Text.Trim() == enumDeliverReceive.DELIVER.ToString() ? true : false;
                        bgnRef = (row.FindControl(ControlIDEuroclear.hdnECBGNREF.ToString()) as HiddenField).Value;
                        citiAcct = Server.HtmlDecode(Convert.ToString((row.Cells[(int)grdEuroclear.CitiAccount]).Text)).Trim();
                        euroclearAcct = Server.HtmlDecode(Convert.ToString((row.Cells[(int)grdEuroclear.EuroclearAccount]).Text)).Trim();
                        tradeTypeVal = (row.Cells[(int)grdEuroclear.TradeType].Text.Trim());
                        swiftRefNo = (row.FindControl(ControlIDEuroclear.hdnECSwiftReferenceNumber.ToString()) as HiddenField).Value;
                        swiftMsg.Rate = GetDecimal((row.FindControl(ControlIDEuroclear.hdnECInterestPayable.ToString()) as HiddenField).Value);
                        swiftMsg.MaturityDate = GetDateTime((row.FindControl(ControlIDEuroclear.hdnECMaturityDate.ToString()) as HiddenField).Value);
                        swiftMsg.TradeDate = GetDateTime((row.FindControl(ControlIDEuroclear.hdnECTradeDate.ToString()) as HiddenField).Value);
                        swiftMsg.SettleDate = GetDateTime((row.FindControl(ControlIDEuroclear.hdnECSettlementDate.ToString()) as HiddenField).Value);
                        swiftMsg.TradeAmount = GetDecimal((row.FindControl(ControlIDEuroclear.hdnECSettlementAmount.ToString()) as HiddenField).Value);
                        swiftMsg.SecurityID = (row.FindControl(ControlIDEuroclear.hdnECCUSIP.ToString()) as HiddenField).Value;
                        swiftMsg.SecurityDescription = (row.FindControl(ControlIDEuroclear.hdnECSecDesc.ToString()) as HiddenField).Value;
                        swiftMsg.OrderCount = GetDecimal((row.Cells[(int)grdEuroclear.FaceAmount].Text.Trim()));
                        swiftMsg.SegregatedAccount = euroclearAcct;
                        swiftMsg.FICCParticipantID = (row.FindControl(ControlIDEuroclear.hdnECClientFICCID.ToString()) as HiddenField).Value;
                        swiftMsg.Category = (row.Cells[(int)grdEuroclear.Category].Text.Trim());
                        swiftMsg.SeggregatedAcctBank = enumSeggregatedAcctBank.EUROCLEAR; //TODO: Need to set thisbased on depot(ClearAgentNbr)
                        swiftMsg.SwiftAction = enumSwiftAction.MT530;

                        RFDFswiftMsgId = new StringBuilder();

                        swiftMsg.SwiftReferenceNumber = swiftRefNo + suffixMsgFunction_R;
                        string prevSwiftRefNo = swiftRefNo.Substring(0, swiftRefNo.Length - 5) + suffixPREV_Release_Hold_G1;
                        swiftMsg.SwiftPrevReferenceNumber = (swiftMsg.Category == enumLoanCategory.NEW.ToString() ? prevSwiftRefNo.Replace(prefixAcctSwitch, prefixPREV_Release_Hold_G1) : swiftRefNo + suffixMsgFunction_S + suffixSEME_D);
                        
                        if (category != enumLoanCategory.NEW.ToString() || lastEuroclearAcct != euroclearAcct || lastBgnRef != bgnRef)
                        {
                            currentSwiftMsgID = swiftMsg.GenerateMT530SwiftMessage(false).ToString();
                            lastSwiftMsgId = currentSwiftMsgID;
                            lastBgnRef = bgnRef;
                            lastEuroclearAcct = euroclearAcct;
                        }
                        else 
                        {
                            currentSwiftMsgID = lastSwiftMsgId;                            
                        }

                        RFDFswiftMsgId.Append(currentSwiftMsgID);

                        _logger.InfoFormat("Swift message generated with SWIFTMessageId {0}.", RFDFswiftMsgId.ToString());

                        xml.Add(new XElement(FieldName,
                           new XAttribute(BGNREF, bgnRef),
                           new XAttribute(AcctNbr, acctNbr),
                           new XAttribute(AcctGrpID, acctGrpID),
                           new XAttribute(ClientFICCID, hdnClientFICCID),
                           new XAttribute(TripartyRepoBankName, hdnTripartyRepoBankName),
                           new XAttribute(IsTriparty, hdnTripartyRepo),
                           new XAttribute(IsFICC, hdnIsFICCMatched),
                           new XAttribute(SecCode, secCode),
                           new XAttribute(SettlementDate, hdnSettlementDate),
                           new XAttribute(TradeType, tradeTypeVal),
                           new XAttribute(CitiAccount, string.Empty),              // CitiAccount not needed hence passing empty                           
                           new XAttribute(SwiftMsgID, RFDFswiftMsgId),
                           new XAttribute(Fed_Status, fedStatus),
                           new XAttribute(Notes, notes),
                           new XAttribute(EuroclearAccount, euroclearAcct),
                           new XAttribute(EuroclearSwitchStatus, (int)enumSwiftAction.MT530),
                           new XAttribute(TOE,Toe)
                       ));
                    }
                }
                catch (Exception ex)
                {
                    _ErrorString = new StringBuilder();
                    _ErrorString.Append(ex.Message);
                    _show_info_row = _ErrorInfoNone;
                    _show_error_row = _ErrorInfoBlank;
                    _logger.Error(ex);
                    return;
                }
            }

            _logger.Info("Swift generation end");

            try
            {
                //Update SwiftMsg ID in SettlementStatus Swift table with swift message id
                UpdateECSettlementStatus(xml);
            }
            catch (Exception ex)
            {
                _ErrorString = new StringBuilder();
                _ErrorString.Append(ex.Message);
                _show_info_row = _ErrorInfoNone;
                _show_error_row = _ErrorInfoBlank;
                _logger.Error(ex);
                return;
            }
        }
