builder.Services.AddReverseProxy()
    .ConfigureHttpClient((context, handler) =>
    {
        handler.Credentials = CredentialCache.DefaultNetworkCredentials;
    })
    .LoadFromConfig(builder.Configuration.GetSection("ReverseProxy"))
    .AddTransforms(builderContext =>
    {
        builderContext.AddRequestTransform(async transformContext =>
        {
            var user = transformContext.HttpContext.User.Identity;
            if (user?.IsAuthenticated == true)
            {
                transformContext.ProxyRequest.Headers.Add("X-User-Id", user.Name);
            }
        });
    });



<system.web>
  <authentication mode="None" />
  <authorization>
    <allow users="*" />
  </authorization>
</system.web>


protected void Application_BeginRequest(object sender, EventArgs e)
{
    string userId = HttpContext.Current.Request.Headers["X-User-Id"];
    if (!string.IsNullOrEmpty(userId))
    {
        // Store user in context, session, or a custom principal
        HttpContext.Current.Items["UserId"] = userId;
    }
}


app.MapGet("/whoami", (HttpContext context) =>
{
    var user = context.User;
    return user?.Identity?.IsAuthenticated == true
        ? $"Hello, {user.Identity.Name}"
        : "Not authenticated";
});
